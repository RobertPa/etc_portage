/* See LICENSE file for copyright and license details. */

/* appearance */
static const char *fonts[] = {
	"Cantarell:size=10"
};


static const char dmenufont[]       = "Cantarell:size=12";
static const char normbordercolor[] = "#444444";
static const char normbgcolor[]     = "#0a0f14";
static const char normfgcolor[]     = "#98d1ce";
static const char selbordercolor[]  = "#98D1CE";
//static const char selbgcolor[]      = "#0D467C";
static const char selbgcolor[]      = "#98d1ce";
//static const char selbgcolor[]      = "#1AA142";
static const char selfgcolor[]      = "#000000";
static const unsigned int borderpx  = 3;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */

/* tagging */
static const char *tags[] = { "www", "Devel", "Media", "4", "5", "6", "7", "8", "9" };

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class      instance    title       tags mask     isfloating   monitor */
     // { NULL,       NULL,       NULL,       0,            False,       -1 },
	  { "Gimp",     NULL,       NULL,       0,            1,           -1 },
};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[T]=",      tile },    /* first entry is default */
	{ "<F>",      NULL },    /* no layout function means floating behavior */
	{ "[M]",      monocle },
    { "TTT",      bstack },
    { "===",      bstackhoriz },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }


static const char scratchpadname[] = "scratchpad";
static const char *scratchpadcmd[] = { "st", "-t", scratchpadname, "-g", "120x34", NULL };
/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
static const char *termcmd[]  = {"st", "-e", "tm", NULL };

static const char *dmenu_cmd[] = {"dmenu_recent", NULL};
static const char *filemanager_cmd[] = {"rangereditor", NULL};
//static const char *surf_cmd[] = {"tabbed", "surf", "-e", NULL};
static const char *surf_cmd[] = {"qutebrowser", NULL};
static const char *powermode_cmd[] = {"powermode", NULL};
static const char *suspend_cmd[] = {"doas", "s2ram", NULL};
static const char *window_switch_cmd[] = {"dmenu_windowswitcher", NULL};
static const char *firefox_cmd[] = {"firejail", "firefox", NULL};
static const char *slock_cmd[] = {"slock", NULL};
static const char *unmount_cmd[] = {"devmon", "--unmount-removable", NULL};
static const char *taskmanager_cmd[] = {"lxtask", NULL};
static const char *chrome_cmd[] = {"chrome", "--process-per-site", NULL};
static const char *paste_cmd[] = {"clipmenu", "-sb", "#680d0d", "-sf", "white", "-l", "15", NULL};
static const char *termclean_cmd[] = {"st", NULL};
static const char *locate_cmd[] = {"dmenu_locate", NULL};
static Key keys[] = {
     /* modifier                  key            function        argument */
	//{ MODKEY,                    XK_space,      spawn,          {.v = dmenucmd } },
    { MODKEY,                    XK_p,      spawn,          {.v = dmenu_cmd} },
	{ MODKEY,                    XK_Return,     spawn,          {.v = termclean_cmd } },
    { MODKEY|ShiftMask,          XK_d,          spawn,          {.v = filemanager_cmd} },
    { MODKEY|ShiftMask,          XK_s,          spawn,          {.v = surf_cmd} },
    { MODKEY|ShiftMask,          XK_p,          spawn,          {.v = powermode_cmd} },
    { MODKEY|ShiftMask,          XK_a,          spawn,          {.v = suspend_cmd} },
    { MODKEY,                    XK_n,          spawn,          {.v = window_switch_cmd} },
    { MODKEY|ShiftMask,          XK_f,          spawn,          {.v = firefox_cmd} },
    { MODKEY|ShiftMask,          XK_i,          spawn,          {.v = slock_cmd} },
    { MODKEY|ShiftMask,          XK_u,          spawn,          {.v = unmount_cmd} },
    { MODKEY|ShiftMask,          XK_Delete,     spawn,          {.v = taskmanager_cmd} },
    { MODKEY|ShiftMask,          XK_c,          spawn,          {.v = chrome_cmd} },
    { MODKEY|ShiftMask,          XK_v,          spawn,          {.v = paste_cmd} },
	{ MODKEY|ShiftMask,			 XK_l,			spawn,			{.v = locate_cmd} },
	//{ MODKEY,                    XK_t,          spawn,			{.v = termclean_cmd} },
	{ MODKEY,                    XK_space,			togglescratch,  {.v = scratchpadcmd } },
	{ MODKEY,                    XK_b,          togglebar,      {0} },
	{ MODKEY,                    XK_j,          focusstack,     {.i = +1 } },
	{ MODKEY,                    XK_k,          focusstack,     {.i = -1 } },
	{ MODKEY,                    XK_i,          incnmaster,     {.i = +1 } },
	{ MODKEY,                    XK_d,          incnmaster,     {.i = -1 } },
	{ MODKEY,                    XK_h,          setmfact,       {.f = -0.05} },
	{ MODKEY,                    XK_l,          setmfact,       {.f = +0.05} },
	{ MODKEY|ShiftMask,          XK_Return,     zoom,           {0} },
	{ MODKEY,                    XK_Tab,        view,           {0} },
	{ MODKEY|ShiftMask,          XK_q,          killclient,     {0} },
	{ MODKEY,                    XK_e,          setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                    XK_f,          setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                    XK_w,          setlayout,      {.v = &layouts[2]} },
    { MODKEY,                    XK_u,          setlayout,      {.v = &layouts[3]} },
    { MODKEY,                    XK_o,          setlayout,      {.v = &layouts[4]} },
   //{ MODKEY,                    XK_space,      setlayout,      {0} },
  //{ MODKEY|ShiftMask,          XK_space,      togglefloating, {0} },
	{ MODKEY,                    XK_0,          view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,          XK_0,          tag,            {.ui = ~0 } },
	{ MODKEY,                    XK_comma,      focusmon,       {.i = -1 } },
	{ MODKEY,                    XK_period,     focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,          XK_comma,      tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,          XK_period,     tagmon,         {.i = +1 } },
	TAGKEYS(                     XK_1,                      0)
	TAGKEYS(                     XK_2,                      1)
	TAGKEYS(                     XK_3,                      2)
	TAGKEYS(                     XK_4,                      3)
	TAGKEYS(                     XK_5,                      4)
	TAGKEYS(                     XK_6,                      5)
	TAGKEYS(                     XK_7,                      6)
	TAGKEYS(                     XK_8,                      7)
	TAGKEYS(                     XK_9,                      8)
	{ MODKEY|ShiftMask,          XK_e,      quit,           {0} },
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};
